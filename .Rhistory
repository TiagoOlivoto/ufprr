image_segment(img, "R")
#| out-width: "100%"
#|
square <- draw_square() |> poly_close()
poly_area(square)
poly_perimeter(square)
polygon <- draw_n_tagon(6)
poly_area(polygon)
n <- c(6, 10, 100, 1000, 100000)
sapply(n, function(x){
draw_n_tagon(x) |> poly_area()
})
# extrair o contorno
cont <- object_contour(img, index = "R")
# extrair o contorno
cont <- object_contour(img, index = "R", watershed = FALSE)
# Número de píxeis do contorno
nrow(cont[[1]])
# coordenadas do contorno
head(cont[[1]])
# polígono
plot_polygon(cont)
# polígono
plot_polygon(cont[[1]])
# polígono
plot_polygon(cont[[2]])
# polígono
plot_polygon(cont[[3]])
poly_area(cont)
poly_perimeter(cont)
#perímetro de um círculo com raio 2
circulo <- draw_circle(radius = 2, plot = FALSE)
poly_perimeter(circulo)
#verifique o resultado
2*pi*2
dist <- poly_centdist(cont)[[1]]
plot(dist, type = "l")
dist <- poly_centdist_mass(cont)[[1]]
plot(dist, type = "l")
dist <- poly_centdist_mass(cont[[2]])
x <- c(cm[1], cont[[2]][1, 1])
y <- c(cm[2], cont[[2]][1, 2])
d1 <- sqrt(diff(x)^2 + diff(y)^2)
dist[[1]]
plot_polygon(cont[[2]])
points(cm[1], cm[2], col = "blue", pch = 19)  # Blue dot for center of mass
segments(x[1], y[1], x[2], y[2], col = "blue", lwd = 2)
plot(dist, type = "l")
img <- image_import("folhas.jpg")
img
img |> image_resize(50) |> image_export("folhas.jpg")
img <- image_import("folhas.jpg")
img
# extrair o contorno
cont <- object_contour(img, index = "R", watershed = FALSE)
dist <- poly_centdist_mass(cont[[3]])
x <- c(cm[1], cont[[2]][1, 1])
x <- c(cm[1], cont[[3]][1, 1])
y <- c(cm[2], cont[[3]][1, 2])
dist <- poly_centdist_mass(cont[[3]])
x <- c(cm[1], cont[[3]][1, 1])
plot_polygon(cont[[3]])
# centroid
cent <- apply(cont[[3]], 2, mean)
points(cent[1], cent[2], col = "red", pch = 19)  # Red dot for centroid
# Center of mass
cm <- poly_mass(cont[[3]])
points(cm[1], cm[2], col = "blue", pch = 19)  # Blue dot for center of mass
legend("topright",
legend = c("Centroid", "Center of Mass"),
col = c("red", "blue"), pch = 19)
img <- image_import("E10_1487.jpg")
# extrair o contorno
cont <- object_contour(img, index = "R", watershed = FALSE)
plot_polygon(cont[[1]])
# centroid
cent <- apply(cont[[1]], 2, mean)
points(cent[1], cent[2], col = "red", pch = 19)  # Red dot for centroid
# Center of mass
cm <- poly_mass(cont[[1]])
points(cm[1], cm[2], col = "blue", pch = 19)  # Blue dot for center of mass
image_export(img, "img_exported_tif.tif")
# Calcule os índices
indexes <- image_index(img, index = c("R, G, B, GRAY, B-G/(B+G)"))
img <- image_import("folha.jpg")
img <- image_import("folhas.jpg")
# Calcule os índices
indexes <- image_index(img, index = c("R, G, B, GRAY, B-G/(B+G)"))
# extrair o contorno
cont <- object_contour(img, index = "R", watershed = FALSE)
plot_polygon(cont[[3]])
plot_polygon(cont[[4]])
# centroid
cent <- apply(cont[[4]], 2, mean)
points(cent[1], cent[2], col = "red", pch = 19)  # Red dot for centroid
# Center of mass
cm <- poly_mass(cont[[4]])
points(cm[1], cm[2], col = "blue", pch = 19)  # Blue dot for center of mass
legend("topright",
legend = c("Centroid", "Center of Mass"),
col = c("red", "blue"), pch = 19)
legend("topright",
legend = c("Centróide", "Centro de massa"),
col = c("red", "blue"), pch = 19)
dist <- poly_centdist_mass(cont[[4]])
x <- c(cm[1], cont[[3]][1, 1])
dist <- poly_centdist_mass(cont[[4]])
x <- c(cm[1], cont[[4]][1, 1])
y <- c(cm[2], cont[[4]][1, 2])
d1 <- sqrt(diff(x)^2 + diff(y)^2)
dist[[1]]
plot_polygon(cont[[4]])
points(cm[1], cm[2], col = "blue", pch = 19)  # Blue dot for center of mass
segments(x[1], y[1], x[2], y[2], col = "blue", lwd = 2)
plot(dist, type = "l")
# wrong measures
plot_polygon(cont[[3]])
lw <- apply(cont[[3]], 2, \(x){range(x)})
abline(v = dist[[1]], col = "red")
abline(v = dist[[1]], col = "red")
abline(h = dist[[3]], col = "blue")
abline(h = dist[[4]], col = "blue")
# wrong measures
plot_polygon(cont[[4]])
img <- image_import("folhas.jpg")
# extrair o contorno
cont <- object_contour(img, index = "R", watershed = FALSE)
plot_polygon(cont[[4]])
# centroid
cent <- apply(cont[[4]], 2, mean)
points(cent[1], cent[2], col = "red", pch = 19)  # Red dot for centroid
img
img |> image_resize(50) |> image_export("folhas.jpg")
img <- image_import("folhas.jpg")
# extrair o contorno
cont <- object_contour(img, index = "R", watershed = FALSE)
plot_polygon(cont[[4]])
# centroid
cent <- apply(cont[[4]], 2, mean)
points(cent[1], cent[2], col = "red", pch = 19)  # Red dot for centroid
# Center of mass
cm <- poly_mass(cont[[4]])
points(cm[1], cm[2], col = "blue", pch = 19)  # Blue dot for center of mass
legend("topright",
legend = c("Centróide", "Centro de massa"),
col = c("red", "blue"), pch = 19)
# wrong measures
plot_polygon(cont[[4]])
lw <- apply(cont[[4]], 2, \(x){range(x)})
abline(v = dist[[1]], col = "red")
abline(v = dist[[1]], col = "red")
dist <- poly_centdist_mass(cont[[4]])
dist
# wrong measures
plot_polygon(cont[[4]])
lw <- apply(cont[[4]], 2, \(x){range(x)})
lw
abline(v = lw[[1]], col = "red")
abline(v = lw[[1]], col = "red")
abline(v = lw[[1]], col = "red")
abline(v = lw[[2]], col = "red")
abline(h = lw[[3]], col = "blue")
abline(h = lw[[4]], col = "blue")
# Correct measures
aligned <- poly_align(cont[[4]])
lw <- apply(aligned, 2, \(x){range(x)})
abline(v = lw[[1]], col = "red")
abline(v = lw[[2]], col = "red")
abline(h = lw[[3]], col = "blue")
abline(h = lw[[4]], col = "blue")
diff(lw)
# with poly_lw()
poly_lw(cont[[1]])
# with poly_lw()
poly_lw(cont[[4]])
poly_pcv(cont[[4]])
poly_pcv(cont)
plot_polygon(cont)
plot_polygon(cont)
set.seed(5)
plot_polygon(cont)
set.seed(5)
plot_polygon(cont)
set.seed(5)
plot_polygon(cont)
set.seed(6)
plot_polygon(cont)
set.seed(8)
plot_polygon(cont)
set.seed(1)
plot_polygon(cont)
plot_polygon(cont)
poly_pcv(cont)
set.seed(1)
plot_polygon(cont)
poly_pcv(cont)
#| eval: false
res <-
analyze_objects(img,
index = "B",
watershed = FALSE,
pcv = TRUE)
image_view(img, object = res)
med <- get_measures(res)
image_view(img, object = med)
#| eval: false
res <-
analyze_objects(pattern = "E",
index = "B",
watershed = FALSE,
pcv = TRUE)
#| eval: false
res <-
analyze_objects(pattern = "E",
index = "B",
watershed = FALSE,
plot = FALSE,
verbose = FALSE,
pcv = TRUE)
med <- get_measures(res)
#| eval: false
res <-
analyze_objects(pattern = "E",
index = "B",
watershed = FALSE,
plot = FALSE,
verbose = FALSE,
pcv = TRUE)
med <- get_measures(res)
View(res)
View(res[["results"]])
debug(get_measures)
med <- get_measures(res)
med <- get_measures(res)
View(merg)
View(smr)
View(object)
View(object[["count"]])
sapply(strsplit(as.character(merg$img), sep), "[", 1)
as.character(merg$img)
View(res)
#| eval: false
res <-
analyze_objects(pattern = "E",
index = "B",
watershed = FALSE,
plot = FALSE,
verbose = FALSE,
pcv = TRUE)
View(res)
View(res[["count"]])
#| warning: false
library(pliman)
library(tidyverse)
# setwd("./imgs")
# set_wd_here("pliman")
#| eval: false
res <-
analyze_objects(pattern = "E",
index = "B",
watershed = FALSE,
plot = FALSE,
# verbose = FALSE,
pcv = TRUE)
set_wd_here("pliman")
#| eval: false
res <-
analyze_objects(pattern = "E",
index = "B",
watershed = FALSE,
plot = FALSE,
# verbose = FALSE,
pcv = TRUE)
med <- get_measures(res)
View(res)
View(res[["results"]])
View(res[["count"]])
#| warning: false
library(pliman)
library(tidyverse)
# setwd("./imgs")
# set_wd_here("pliman")
set_wd_here("pliman")
#| eval: false
res <-
analyze_objects(pattern = "E",
index = "B",
watershed = FALSE,
plot = FALSE,
verbose = FALSE,
pcv = TRUE)
med <- get_measures(res)
image_view(img, object = med)
hist(med$results$area)
med$results
med$results |> round_cols()
med$results |> round_cols(digits = 2)
med$results |> round_cols(digits = 2) |> print()
med$results |> round_cols(digits = 2) |> print()
med$results |>
round_cols(digits = 2) |>
print() |>
knitr::kable()
# análise da imagem
res <-
analyze_objects(pattern = "G",
reference = TRUE,
reference_area = 20,
back_fore_index = "R/(G/B)",
fore_ref_index = "B-R")
# análise da imagem
res <-
analyze_objects(pattern = "G",
reference = TRUE,
reference_area = 20,
back_fore_index = "R/(G/B)",
fore_ref_index = "B-R",
watershed = FALSE)
plot(res)
# análise da imagem
res <-
analyze_objects(pattern = "G",
reference = TRUE,
reference_area = 20,
back_fore_index = "R/(G/B)",
fore_ref_index = "B-R",
watershed = FALSE)
#| eval: false
res <-
analyze_objects(pattern = "E",
index = "B",
watershed = FALSE,
plot = FALSE,
verbose = FALSE,
pcv = TRUE)
# Importar uma imagem de ortomosaico como um objeto SpatRaster
mosaic <- mosaic_input("orthomosaicos/ortho.tif")
getwd()
# Importar uma imagem de ortomosaico como um objeto SpatRaster
mosaic <- mosaic_input("orthomosaicos/ortho.tif")
list.files(path = "orthomosaicos")
list.files(path = "./orthomosaicos")
list.files()
# Importar uma imagem de ortomosaico como um objeto SpatRaster
mosaic <- mosaic_input("orthomosaicos/ortho.tif")
# Plotar o mosaico importado em RGB
mosaic_plot_rgb(mosaic)
# Criar um mapa interativo usando as bandas RGB (R = 3, G = 2, B = 1)
bm <- mosaic_view(mosaic,
r = 3, # Canal vermelho
g = 2, # Canal verde
b = 1) # Canal azul
# Importar um objeto shapefile de um arquivo
shp <- shapefile_input("orthomosaics/shp_dsm.rds")
# Importar um objeto shapefile de um arquivo
shp <- shapefile_input("orthomosaicos/shp_dsm.rds")
# Plotar o mosaico em RGB
mosaic_plot_rgb(mosaic)
# Sobrepor o shapefile importado ao mosaico com largura de linha personalizada
shapefile_plot(shp, add = TRUE, lwd = 2)
# Calcular índices de vegetação (por exemplo, NGRDI e GLI) usando os canais RGB do mosaico
ind <- mosaic_index(mosaic,
r = 1, # Canal vermelho
g = 2, # Canal verde
b = 3, # Canal azul
index = c("NGRDI", "GLI")) # Lista de índices de vegetação a calcular
# Extrair valores de índices de vegetação para cada parcela no shapefile
# Usando o valor mediano como estatística de resumo
vals <-
mosaic_extract(ind,
shapefile = shp,
fun = "median", # Função de resumo (por exemplo, mediana)
progress = FALSE) # Desativar barra de progresso
# Note que os valores são medianos para a parcela inteira
head(vals)
# Analisar o mosaico usando o shapefile definido e índices de vegetação
res <-
mosaic_analyze(mosaic,
basemap = bm,                      # Mapa base para visualização
shapefile = shp,                   # Shapefile com parcelas
plot_index = c("NGRDI", "GLI"),    # Índices de vegetação a calcular
summarize_fun = c("median", "mean"), # Estatísticas de resumo para cada parcela
segment_plot = TRUE,               # Habilitar segmentação de parcela (por exemplo, mascarar solo)
attribute = "median.NGRDI")        # Atributo para mapeamento (por exemplo, escala de cores NGRDI)
# Exibir o gráfico de resultado
res$result_plot
# Adicionar atributo de cobertura de dossel ao mapa interativo
bm + shapefile_view(res$result_plot, attribute = "coverage")
dsm <- mosaic_input("orthomosaics/dsm_soy.tif")
dsm <- mosaic_input("orthomosaicos/dsm_soy.tif")
mosaic_plot(dsm)
dtm <- mosaic_input("orthomosaicos/dtm_soy.tif")
mosaic_plot(dtm)
mask <- mosaic_input("orthomosaicos/mask_dsm_soy.tif")
mosaic_plot(mask)
dsm <- mosaic_input("orthomosaicos/dsm_soy.tif")
mosaic_plot(dsm)
dtm <- mosaic_input("orthomosaicos/dtm_soy.tif")
mosaic_plot(dtm)
mask <- mosaic_input("orthomosaicos/mask_dsm_soy.tif")
mosaic_plot(mask)
chm <- mosaic_chm(dsm = dsm,
dtm = dtm,
mask = mask,
mask_soil = FALSE)
mosaic_plot(chm$chm)
dsm <- mosaic_input("orthomosaicos/trees.tif")
mosaic <- mosaic_input("orthomosaicos/trees.tif")
shp <- shapefile_input("orthomosaicos/shape_trees.rds")
?mosaic_analyze
inventario <-
mosaic_analyze(mosaic,
shapefile = shp,
plot_index = "NDVI")
bm <- mosaic_view(mosaic, r = 3, g = 2, b = 1)
bm
bm <- mosaic_view(mosaic, r = 3, g = 2, b = 1,
max_pixels = 4e6)
bm
inventario <-
mosaic_analyze(mosaic,
shapefile = shp,
plot_index = "NDVI",
threshold = 0.7,
opening = 5,
segment_individuals = TRUE)
inventario <-
mosaic_analyze(mosaic,
shapefile = shp,
basemap = bm,
plot_index = "NDVI",
threshold = 0.7,
opening = 5,
segment_individuals = TRUE)
inventario <-
mosaic_analyze(mosaic,
r = 3,
nir = 5,
shapefile = shp,
basemap = bm,
plot_index = "NDVI",
threshold = 0.7,
opening = 5,
segment_individuals = TRUE)
inventario$map_indiv
shp <- sf::st_bbox(mosaic)
shp
ext <- terra::ext(mosaic)
ext
shp <- terra::vect(shp)
shp <- shapefile_input("orthomosaicos/shape_trees.rds")
shp <- shapefile_input("orthomosaicos/shape_trees.rds", as_sf = FALSE)
terra::vect(shp)
terra::crop(shp, ext)
terra::crop(shp, ext) |> plot()
terra::crop(shp, ext) |> shapefile_plot()
terra::crop(shp, ext)
terra::crop(shp, ext) |> shapefile_export("shape_trees.rds")
shp <- shapefile_input("orthomosaicos/shape_trees.rds")
inventario <-
mosaic_analyze(mosaic,
r = 3,
nir = 5,
shapefile = shp,
basemap = bm,
plot_index = "NDVI",
threshold = 0.7,
opening = 5,
segment_individuals = TRUE)
inventario$map_indiv
shp |> shapefile_view()
shp <- shapefile_input("orthomosaicos/shape_trees.rds", as_sf = FALSE)
terra::crop(shp, ext)
terra::crop(shp, ext) |> shapefile_export("shape_trees2.rds")
shp <- shapefile_input("orthomosaicos/shape_trees2.rds", as_sf = FALSE)
shp <- shapefile_input("orthomosaicos/shape_trees.rds")
inventario <-
mosaic_analyze(mosaic,
r = 3,
nir = 5,
shapefile = shp,
basemap = bm,
plot_index = "NDVI",
threshold = 0.7,
opening = 5,
segment_individuals = TRUE)
inventario$map_indiv
inventario <-
mosaic_analyze(mosaic,
r = 3,
nir = 5,
shapefile = shp,
basemap = bm,
plot_index = "NDVI",
threshold = 0.7,
opening = 7,
segment_individuals = TRUE)
inventario$map_indiv
inventario <-
mosaic_analyze(mosaic,
r = 3,
nir = 5,
shapefile = shp,
basemap = bm,
plot_index = "NDVI",
threshold = 0.7,
opening = 7,
filter = 3,
segment_individuals = TRUE)
inventario$map_indiv
devtools::create()
devtools::create("D:/Desktop/teste")
